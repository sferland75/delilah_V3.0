<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Pattern Recognition Test</title>
  <style>
    body {
      font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Arial, sans-serif;
      line-height: 1.6;
      margin: 0;
      padding: 20px;
      background-color: #f9fafb;
      color: #374151;
    }
    
    .container {
      max-width: 1000px;
      margin: 0 auto;
      background-color: white;
      padding: 30px;
      border-radius: 10px;
      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    }
    
    h1 {
      color: #1e40af;
      margin-top: 0;
      border-bottom: 2px solid #e5e7eb;
      padding-bottom: 10px;
    }
    
    h2 {
      color: #4b5563;
      margin-top: 1.5em;
      font-weight: 600;
    }
    
    .status-box {
      padding: 15px;
      border-radius: 6px;
      margin-bottom: 20px;
    }
    
    .success {
      background-color: #d1fae5;
      color: #065f46;
      border-left: 4px solid #10b981;
    }
    
    .warning {
      background-color: #fef3c7;
      color: #92400e;
      border-left: 4px solid #f59e0b;
    }
    
    .error {
      background-color: #fee2e2;
      color: #b91c1c;
      border-left: 4px solid #ef4444;
    }
    
    .file-upload {
      border: 2px dashed #cbd5e1;
      padding: 20px;
      text-align: center;
      border-radius: 6px;
      margin-bottom: 20px;
      background-color: #f8fafc;
    }
    
    .confidence-bar {
      height: 10px;
      background-color: #e5e7eb;
      border-radius: 5px;
      margin-top: 6px;
      overflow: hidden;
    }
    
    .confidence-level {
      height: 100%;
      border-radius: 5px;
    }
    
    .high-confidence {
      background-color: #10b981;
    }
    
    .medium-confidence {
      background-color: #f59e0b;
    }
    
    .low-confidence {
      background-color: #ef4444;
    }
    
    .section-card {
      border: 1px solid #e5e7eb;
      border-radius: 6px;
      padding: 15px;
      margin-bottom: 15px;
      background-color: #f9fafb;
    }
    
    .section-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 10px;
    }
    
    .section-title {
      font-weight: 600;
      font-size: 1.1em;
      color: #1f2937;
      margin: 0;
    }
    
    .section-content {
      background-color: white;
      padding: 15px;
      border-radius: 6px;
      border: 1px solid #e5e7eb;
    }
    
    .confidence-badge {
      font-size: 0.8em;
      padding: 3px 8px;
      border-radius: 9999px;
      font-weight: 500;
    }
    
    .section-content ul {
      margin-top: 5px;
      margin-bottom: 5px;
    }
    
    button {
      background-color: #1e40af;
      color: white;
      border: none;
      padding: 10px 16px;
      border-radius: 6px;
      font-weight: 500;
      cursor: pointer;
      transition: background-color 0.2s;
    }
    
    button:hover {
      background-color: #1e3a8a;
    }
    
    button:disabled {
      background-color: #9ca3af;
      cursor: not-allowed;
    }
    
    .loading {
      display: flex;
      align-items: center;
      justify-content: center;
      margin: 20px 0;
    }
    
    .loading-text {
      margin-left: 10px;
    }
    
    pre {
      background-color: #f8fafc;
      padding: 15px;
      border-radius: 6px;
      overflow: auto;
      max-height: 300px;
      font-size: 0.85em;
      border: 1px solid #e5e7eb;
    }
    
    .field {
      margin-bottom: 8px;
    }
    
    .field-label {
      font-weight: 500;
      color: #4b5563;
      margin-right: 8px;
    }
    
    .field-value {
      color: #1f2937;
    }
  </style>
</head>
<body>
  <div class="container">
    <h1>Pattern Recognition Test</h1>
    
    <div class="status-box success">
      <p><strong>Pattern Recognition System Installed!</strong> Use this page to test the enhanced pattern recognition system.</p>
    </div>
    
    <div class="file-upload">
      <input type="file" id="pdf-upload" accept=".pdf" style="display: none;">
      <button id="select-file-btn">Select PDF File</button>
      <p id="selected-file" style="margin-top: 10px; margin-bottom: 0; display: none;"></p>
    </div>
    
    <div id="processing" class="loading" style="display: none;">
      <div style="width: 30px; height: 30px; border: 4px solid #e5e7eb; border-top-color: #1e40af; border-radius: 50%; animation: spin 1s linear infinite;"></div>
      <span class="loading-text">Processing PDF...</span>
    </div>
    
    <div id="results-container" style="display: none;">
      <h2>Processing Results</h2>
      
      <div id="sections-container">
        <!-- Sections will be added here dynamically -->
      </div>
      
      <div style="margin-top: 30px;">
        <h2>Raw Processing Data</h2>
        <pre id="json-output"></pre>
      </div>
    </div>
  </div>
  
  <script>
    // Import PDF.js
    const script = document.createElement('script');
    script.src = 'https://unpkg.com/pdfjs-dist@2.16.105/build/pdf.min.js';
    document.head.appendChild(script);
    
    // Import our pattern recognition module (simplified for testing)
    script.onload = function() {
      // Initialize PDF.js
      pdfjsLib.GlobalWorkerOptions.workerSrc = 'https://unpkg.com/pdfjs-dist@2.16.105/build/pdf.worker.min.js';
      
      // Set up the file selection
      const fileInput = document.getElementById('pdf-upload');
      const selectButton = document.getElementById('select-file-btn');
      const selectedFileText = document.getElementById('selected-file');
      const processing = document.getElementById('processing');
      const resultsContainer = document.getElementById('results-container');
      const sectionsContainer = document.getElementById('sections-container');
      const jsonOutput = document.getElementById('json-output');
      
      selectButton.addEventListener('click', () => {
        fileInput.click();
      });
      
      fileInput.addEventListener('change', async (e) => {
        if (e.target.files.length === 0) return;
        
        const file = e.target.files[0];
        selectedFileText.textContent = `Selected file: ${file.name}`;
        selectedFileText.style.display = 'block';
        
        // Show processing indicator
        processing.style.display = 'flex';
        resultsContainer.style.display = 'none';
        sectionsContainer.innerHTML = '';
        
        try {
          // Read the PDF file
          const data = await readPdfFile(file);
          
          // Process the text using our pattern recognition
          const processedData = await processPdf(data);
          
          // Display the results
          displayResults(processedData);
        } catch (error) {
          console.error('Error processing PDF:', error);
          alert('Error processing PDF. Please try another file.');
        } finally {
          processing.style.display = 'none';
        }
      });
      
      async function readPdfFile(file) {
        return new Promise((resolve, reject) => {
          const reader = new FileReader();
          
          reader.onload = async function(event) {
            try {
              const arrayBuffer = event.target.result;
              const text = await extractTextFromPdf(arrayBuffer);
              resolve(text);
            } catch (error) {
              reject(error);
            }
          };
          
          reader.onerror = reject;
          reader.readAsArrayBuffer(file);
        });
      }
      
      async function extractTextFromPdf(arrayBuffer) {
        const data = new Uint8Array(arrayBuffer);
        const loadingTask = pdfjsLib.getDocument({ data });
        const pdf = await loadingTask.promise;
        
        let fullText = '';
        for (let i = 1; i <= pdf.numPages; i++) {
          const page = await pdf.getPage(i);
          const content = await page.getTextContent();
          const pageText = content.items.map(item => item.str).join(' ');
          fullText += pageText + '\n\n';
        }
        
        return fullText;
      }
      
      async function processPdf(text) {
        // This is where we would normally call our pattern recognition system
        // For this test, we'll create a mock implementation that fetches the real one
        
        try {
          // Try to fetch the pattern recognition module from the application
          const response = await fetch('/api/process-pdf', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({ text })
          });
          
          if (response.ok) {
            return await response.json();
          }
        } catch (error) {
          console.error('Error calling API:', error);
        }
        
        // Fallback to simple section detection
        return simpleSectionDetection(text);
      }
      
      function simpleSectionDetection(text) {
        // A very simplified version of pattern matching for testing
        const result = {
          sectionConfidence: {},
          data: {}
        };
        
        const sections = [
          { name: 'DEMOGRAPHICS', keywords: ['demographics', 'personal information', 'client information'] },
          { name: 'MEDICAL_HISTORY', keywords: ['medical history', 'diagnosis', 'condition'] },
          { name: 'SYMPTOMS', keywords: ['symptoms', 'pain', 'discomfort'] },
          { name: 'FUNCTIONAL_STATUS', keywords: ['functional status', 'mobility', 'ambulation'] },
          { name: 'ENVIRONMENTAL', keywords: ['home assessment', 'environmental', 'accessibility'] },
          { name: 'ADLS', keywords: ['activities of daily living', 'adls', 'self-care'] },
          { name: 'ATTENDANT_CARE', keywords: ['attendant care', 'caregiver', 'assistance'] },
          { name: 'TYPICAL_DAY', keywords: ['typical day', 'daily routine', 'schedule'] },
          { name: 'PURPOSE', keywords: ['purpose', 'methodology', 'referral'] }
        ];
        
        // Split text into paragraphs
        const paragraphs = text.split(/\n\s*\n/);
        
        // Check each section
        sections.forEach(section => {
          let sectionContent = '';
          let sectionFound = false;
          let confidenceScore = 0;
          
          // Look for keywords
          for (const paragraph of paragraphs) {
            const lowerPara = paragraph.toLowerCase();
            
            // Count how many keywords match
            const matchingKeywords = section.keywords.filter(keyword => 
              lowerPara.includes(keyword)
            );
            
            if (matchingKeywords.length > 0) {
              sectionFound = true;
              confidenceScore = Math.min(1, matchingKeywords.length / 3); // Simple confidence calculation
              sectionContent += paragraph + '\n\n';
            }
          }
          
          if (sectionFound) {
            result.sectionConfidence[section.name] = confidenceScore;
            result.data[section.name.toLowerCase()] = { 
              raw: sectionContent,
              content: sectionContent
            };
          }
        });
        
        return result;
      }
      
      function displayResults(data) {
        // Update the JSON display
        jsonOutput.textContent = JSON.stringify(data, null, 2);
        
        // Create section cards
        const sections = Object.keys(data.sectionConfidence || {});
        
        if (sections.length === 0) {
          sectionsContainer.innerHTML = '<div class="status-box warning">No sections were detected in this document.</div>';
        } else {
          sections.forEach(section => {
            const confidence = data.sectionConfidence[section];
            const sectionData = data.data[section.toLowerCase()];
            
            // Create the section card
            const card = document.createElement('div');
            card.className = 'section-card';
            
            // Create the header
            const header = document.createElement('div');
            header.className = 'section-header';
            
            // Create the title
            const title = document.createElement('h3');
            title.className = 'section-title';
            title.textContent = formatSectionName(section);
            
            // Create the confidence badge
            const badge = document.createElement('span');
            badge.className = 'confidence-badge';
            badge.textContent = `${Math.round(confidence * 100)}%`;
            
            // Set the badge color
            if (confidence >= 0.8) {
              badge.style.backgroundColor = '#d1fae5';
              badge.style.color = '#065f46';
            } else if (confidence >= 0.5) {
              badge.style.backgroundColor = '#fef3c7';
              badge.style.color = '#92400e';
            } else {
              badge.style.backgroundColor = '#fee2e2';
              badge.style.color = '#b91c1c';
            }
            
            // Add title and badge to header
            header.appendChild(title);
            header.appendChild(badge);
            
            // Create the confidence bar
            const barContainer = document.createElement('div');
            barContainer.className = 'confidence-bar';
            
            const bar = document.createElement('div');
            bar.className = 'confidence-level';
            bar.style.width = `${confidence * 100}%`;
            
            // Set the bar color
            if (confidence >= 0.8) {
              bar.classList.add('high-confidence');
            } else if (confidence >= 0.5) {
              bar.classList.add('medium-confidence');
            } else {
              bar.classList.add('low-confidence');
            }
            
            barContainer.appendChild(bar);
            
            // Create the content preview
            const content = document.createElement('div');
            content.className = 'section-content';
            
            // Add the appropriate content for each section type
            if (sectionData) {
              switch(section) {
                case 'DEMOGRAPHICS':
                  content.innerHTML = formatDemographics(sectionData);
                  break;
                case 'MEDICAL_HISTORY':
                  content.innerHTML = formatMedicalHistory(sectionData);
                  break;
                case 'SYMPTOMS':
                  content.innerHTML = formatSymptoms(sectionData);
                  break;
                case 'FUNCTIONAL_STATUS':
                  content.innerHTML = formatFunctionalStatus(sectionData);
                  break;
                case 'ENVIRONMENTAL':
                  content.innerHTML = formatEnvironmental(sectionData);
                  break;
                case 'ADLS':
                  content.innerHTML = formatADLs(sectionData);
                  break;
                case 'ATTENDANT_CARE':
                  content.innerHTML = formatAttendantCare(sectionData);
                  break;
                case 'TYPICAL_DAY':
                  content.innerHTML = formatTypicalDay(sectionData);
                  break;
                case 'PURPOSE':
                  content.innerHTML = formatPurpose(sectionData);
                  break;
                default:
                  content.innerHTML = `<p><em>Preview not available for this section.</em></p>`;
              }
            } else {
              content.innerHTML = `<p><em>No data available for this section.</em></p>`;
            }
            
            // Add the components to the card
            card.appendChild(header);
            card.appendChild(barContainer);
            card.appendChild(content);
            
            // Add the card to the container
            sectionsContainer.appendChild(card);
          });
        }
        
        // Show the results
        resultsContainer.style.display = 'block';
      }
      
      function formatSectionName(section) {
        // Convert from SECTION_NAME to Section Name
        return section
          .split('_')
          .map(word => word.charAt(0) + word.slice(1).toLowerCase())
          .join(' ');
      }
      
      function formatDemographics(data) {
        if (!data.name && !data.age && !data.gender && !data.dob) {
          return `<p><em>Basic demographic information detected. See raw data for details.</em></p>`;
        }
        
        let html = '<div>';
        
        if (data.name) {
          html += `<div class="field"><span class="field-label">Name:</span><span class="field-value">${data.name}</span></div>`;
        }
        
        if (data.dob) {
          html += `<div class="field"><span class="field-label">Date of Birth:</span><span class="field-value">${data.dob}</span></div>`;
        }
        
        if (data.age) {
          html += `<div class="field"><span class="field-label">Age:</span><span class="field-value">${data.age}</span></div>`;
        }
        
        if (data.gender) {
          html += `<div class="field"><span class="field-label">Gender:</span><span class="field-value">${data.gender}</span></div>`;
        }
        
        if (data.address) {
          html += `<div class="field"><span class="field-label">Address:</span><span class="field-value">${data.address}</span></div>`;
        }
        
        if (data.phone) {
          html += `<div class="field"><span class="field-label">Phone:</span><span class="field-value">${data.phone}</span></div>`;
        }
        
        html += '</div>';
        return html;
      }
      
      function formatMedicalHistory(data) {
        let html = '<div>';
        
        if (data.conditions && data.conditions.length > 0) {
          html += '<div class="field"><span class="field-label">Conditions:</span></div>';
          html += '<ul>';
          data.conditions.slice(0, 5).forEach(condition => {
            html += `<li>${condition}</li>`;
          });
          html += '</ul>';
          
          if (data.conditions.length > 5) {
            html += `<p><em>...and ${data.conditions.length - 5} more conditions</em></p>`;
          }
        }
        
        if (data.primaryDiagnosis) {
          html += `<div class="field"><span class="field-label">Primary Diagnosis:</span><span class="field-value">${data.primaryDiagnosis}</span></div>`;
        }
        
        html += '</div>';
        return html;
      }
      
      function formatSymptoms(data) {
        let html = '<div>';
        
        if (data.reportedSymptoms && data.reportedSymptoms.length > 0) {
          html += '<div class="field"><span class="field-label">Reported Symptoms:</span></div>';
          html += '<ul>';
          data.reportedSymptoms.slice(0, 5).forEach(symptom => {
            html += `<li>${symptom}</li>`;
          });
          html += '</ul>';
          
          if (data.reportedSymptoms.length > 5) {
            html += `<p><em>...and ${data.reportedSymptoms.length - 5} more symptoms</em></p>`;
          }
        }
        
        if (data.painDescription) {
          html += `<div class="field"><span class="field-label">Pain Description:</span><span class="field-value">${data.painDescription}</span></div>`;
        }
        
        html += '</div>';
        return html;
      }
      
      function formatFunctionalStatus(data) {
        let html = '<div>';
        
        if (data.mobilityStatus) {
          html += `<div class="field"><span class="field-label">Mobility Status:</span><span class="field-value">${data.mobilityStatus}</span></div>`;
        }
        
        if (data.functionalLimitations && data.functionalLimitations.length > 0) {
          html += '<div class="field"><span class="field-label">Functional Limitations:</span></div>';
          html += '<ul>';
          data.functionalLimitations.slice(0, 5).forEach(limitation => {
            html += `<li>${limitation}</li>`;
          });
          html += '</ul>';
        }
        
        html += '</div>';
        return html;
      }
      
      function formatEnvironmental(data) {
        let html = '<div>';
        
        if (data.homeType) {
          html += `<div class="field"><span class="field-label">Home Type:</span><span class="field-value">${data.homeType}</span></div>`;
        }
        
        if (data.barriers && data.barriers.length > 0) {
          html += '<div class="field"><span class="field-label">Barriers:</span></div>';
          html += '<ul>';
          data.barriers.slice(0, 5).forEach(barrier => {
            html += `<li>${barrier}</li>`;
          });
          html += '</ul>';
        }
        
        if (data.recommendations && data.recommendations.length > 0) {
          html += '<div class="field"><span class="field-label">Recommendations:</span></div>';
          html += '<ul>';
          data.recommendations.slice(0, 3).forEach(recommendation => {
            html += `<li>${recommendation}</li>`;
          });
          html += '</ul>';
        }
        
        html += '</div>';
        return html;
      }
      
      function formatADLs(data) {
        let html = '<div>';
        
        const adlCategories = {
          'Self-Care': data.selfCare || {},
          'Mobility': data.mobility || {},
          'Instrumental': data.instrumental || {}
        };
        
        Object.entries(adlCategories).forEach(([category, activities]) => {
          if (Object.keys(activities).length > 0) {
            html += `<div class="field"><span class="field-label">${category} Activities:</span></div>`;
            html += '<ul>';
            
            Object.entries(activities).slice(0, 3).forEach(([activity, details]) => {
              html += `<li>${activity}: ${details.level || 'Level not specified'}</li>`;
            });
            
            html += '</ul>';
          }
        });
        
        html += '</div>';
        return html;
      }
      
      function formatAttendantCare(data) {
        let html = '<div>';
        
        if (data.caregiverInfo && data.caregiverInfo.type) {
          html += `<div class="field"><span class="field-label">Caregiver Type:</span><span class="field-value">${data.caregiverInfo.type}</span></div>`;
        }
        
        if (data.careHours && data.careHours.weekly) {
          html += `<div class="field"><span class="field-label">Weekly Hours:</span><span class="field-value">${data.careHours.weekly}</span></div>`;
        }
        
        const careCategories = {
          'Personal Care': data.careNeeds?.personalCare || [],
          'Housekeeping': data.careNeeds?.housekeeping || [],
          'Supervision': data.careNeeds?.supervision || []
        };
        
        Object.entries(careCategories).forEach(([category, needs]) => {
          if (needs.length > 0) {
            html += `<div class="field"><span class="field-label">${category} Needs:</span></div>`;
            html += '<ul>';
            
            needs.slice(0, 3).forEach(need => {
              html += `<li>${need}</li>`;
            });
            
            html += '</ul>';
          }
        });
        
        html += '</div>';
        return html;
      }
      
      function formatTypicalDay(data) {
        let html = '<div>';
        
        const timeframes = {
          'Morning': data.morningRoutine || [],
          'Afternoon': data.afternoonRoutine || [],
          'Evening': data.eveningRoutine || [],
          'Night': data.nightRoutine || []
        };
        
        Object.entries(timeframes).forEach(([timeframe, activities]) => {
          if (activities.length > 0) {
            html += `<div class="field"><span class="field-label">${timeframe}:</span></div>`;
            html += '<ul>';
            
            activities.slice(0, 3).forEach(activity => {
              html += `<li>${activity}</li>`;
            });
            
            html += '</ul>';
          }
        });
        
        html += '</div>';
        return html;
      }
      
      function formatPurpose(data) {
        let html = '<div>';
        
        if (data.assessmentPurpose) {
          html += `<div class="field"><span class="field-label">Purpose:</span><span class="field-value">${data.assessmentPurpose}</span></div>`;
        }
        
        if (data.referralSource) {
          html += `<div class="field"><span class="field-label">Referral Source:</span><span class="field-value">${data.referralSource}</span></div>`;
        }
        
        if (data.methodologies && data.methodologies.length > 0) {
          html += '<div class="field"><span class="field-label">Methodologies:</span></div>';
          html += '<ul>';
          
          data.methodologies.slice(0, 3).forEach(methodology => {
            html += `<li>${methodology}</li>`;
          });
          
          html += '</ul>';
        }
        
        html += '</div>';
        return html;
      }
    };
  </script>
  
  <style>
    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
  </style>
</body>
</html>
