"use client";

import React from 'react';

interface AssessmentData {
  demographics?: any;
  medicalHistory?: any;
  symptomsAssessment?: any;
  functionalStatus?: any;
  typicalDay?: any;
  environmentalAssessment?: any;
  activitiesDailyLiving?: any;
  attendantCare?: any;
  // Add other section data types as needed
}

interface AssessmentContextType {
  data: AssessmentData;
  updateSection: (section: keyof AssessmentData, data: any) => void;
  setAssessmentData: (data: AssessmentData) => void;
}

const AssessmentContext = React.createContext<AssessmentContextType>({
  data: {},
  updateSection: () => {},
  setAssessmentData: () => {},
});

export function AssessmentProvider({ children }: { children: React.ReactNode }) {
  const [data, setData] = React.useState<AssessmentData>({});

  const updateSection = (section: keyof AssessmentData, newData: any) => {
    setData(prev => ({
      ...prev,
      [section]: newData
    }));
  };

  const setAssessmentData = (newData: AssessmentData) => {
    setData(newData);
    console.log("Assessment data loaded:", newData);
  };

  return (
    <AssessmentContext.Provider value={{ data, updateSection, setAssessmentData }}>
      {children}
    </AssessmentContext.Provider>
  );
}

export function useAssessment() {
  const context = React.useContext(AssessmentContext);
  if (context === undefined) {
    throw new Error('useAssessment must be used within an AssessmentProvider');
  }
  return context;
}

// Also export for use in the LoadAssessment component
export const useAssessmentContext = useAssessment;
